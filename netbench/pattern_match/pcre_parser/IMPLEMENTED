PCRESYNTAX(3)                                                    PCRESYNTAX(3)


NAME
       PCRE - Perl-compatible regular expressions


PCRE REGULAR EXPRESSION SYNTAX SUMMARY

       The  full syntax and semantics of the regular expressions that are sup-
       ported by PCRE are described in  the  pcrepattern  documentation.  This
       document contains just a quick-reference summary of the syntax.


QUOTING

x         \x         where x is non-alphanumeric is a literal x
x         \Q...\E    treat enclosed characters as literal


CHARACTERS

x         \a         alarm, that is, the BEL character (hex 07)
x         \cx        "control-x", where x is any character
x         \e         escape (hex 1B)
x         \f         formfeed (hex 0C)
x         \n         newline (hex 0A)
x         \r         carriage return (hex 0D)
x         \t         tab (hex 09)
x         \ddd       character with octal code ddd, or backreference
x         \xhh       character with hex code hh
         \x{hhh..}  character with hex code hhh..


CHARACTER TYPES

x         .          any character except newline;
                      in dotall mode, any character whatsoever
         \C         one byte, even in UTF-8 mode (best avoided)
x         \d         a decimal digit
x         \D         a character that is not a decimal digit
x         \h         a horizontal whitespace character
x         \H         a character that is not a horizontal whitespace character
         \p{xx}     a character with the xx property
         \P{xx}     a character without the xx property
x         \R         a newline sequence
x         \s         a whitespace character
x         \S         a character that is not a whitespace character
x         \v         a vertical whitespace character
x         \V         a character that is not a vertical whitespace character
x         \w         a "word" character
x         \W         a "non-word" character
         \X         an extended Unicode sequence

       In PCRE, \d, \D, \s, \S, \w, and \W recognize only ASCII characters.


GENERAL CATEGORY PROPERTY CODES FOR \p and \P

         C          Other
         Cc         Control
         Cf         Format
         Cn         Unassigned
         Co         Private use
         Cs         Surrogate

         L          Letter
         Ll         Lower case letter
         Lm         Modifier letter
         Lo         Other letter
         Lt         Title case letter
         Lu         Upper case letter
         L&         Ll, Lu, or Lt

         M          Mark
         Mc         Spacing mark
         Me         Enclosing mark
         Mn         Non-spacing mark

         N          Number
         Nd         Decimal number
         Nl         Letter number
         No         Other number

         P          Punctuation
         Pc         Connector punctuation
         Pd         Dash punctuation
         Pe         Close punctuation
         Pf         Final punctuation
         Pi         Initial punctuation
         Po         Other punctuation
         Ps         Open punctuation

         S          Symbol
         Sc         Currency symbol
         Sk         Modifier symbol
         Sm         Mathematical symbol
         So         Other symbol

         Z          Separator
         Zl         Line separator
         Zp         Paragraph separator
         Zs         Space separator


SCRIPT NAMES FOR \p AND \P

       Arabic,  Armenian,  Balinese,  Bengali,  Bopomofo,  Braille,  Buginese,
       Buhid, Canadian_Aboriginal, Carian, Cham, Cherokee, Common, Coptic, Cu-
       neiform,  Cypriot,  Cyrillic,  Deseret, Devanagari, Ethiopic, Georgian,
       Glagolitic, Gothic, Greek, Gujarati, Gurmukhi,  Han,  Hangul,  Hanunoo,
       Hebrew,  Hiragana,  Inherited, Kannada, Katakana, Kayah_Li, Kharoshthi,
       Khmer, Lao, Latin, Lepcha, Limbu, Linear_B, Lycian, Lydian,  Malayalam,
       Mongolian,  Myanmar,  New_Tai_Lue, Nko, Ogham, Old_Italic, Old_Persian,
       Ol_Chiki, Oriya, Osmanya, Phags_Pa, Phoenician, Rejang, Runic, Saurash-
       tra,  Shavian,  Sinhala,  Sudanese, Syloti_Nagri, Syriac, Tagalog, Tag-
       banwa,  Tai_Le,  Tamil,  Telugu,  Thaana,  Thai,   Tibetan,   Tifinagh,
       Ugaritic, Vai, Yi.


CHARACTER CLASSES

x         [...]       positive character class
x         [^...]      negative character class
x         [x-y]       range (can be used for hex characters)
x         [[:xxx:]]   positive POSIX named set
x         [[:^xxx:]]  negative POSIX named set

x         alnum       alphanumeric
x         alpha       alphabetic
x         ascii       0-127
x         blank       space or tab
x         cntrl       control character
x         digit       decimal digit
x         graph       printing, excluding space
x         lower       lower case letter
x         print       printing, including space
x         punct       printing, excluding alphanumeric
x         space       whitespace
x         upper       upper case letter
x         word        same as \w
x         xdigit      hexadecimal digit

       In PCRE, POSIX character set names recognize only ASCII characters. You
       can use \Q...\E inside a character class.


QUANTIFIERS

x         ?           0 or 1, greedy
x         ?+          0 or 1, possessive
x         ??          0 or 1, lazy
x         *           0 or more, greedy
x         *+          0 or more, possessive
x         *?          0 or more, lazy
x         +           1 or more, greedy
x         ++          1 or more, possessive
x         +?          1 or more, lazy
x         {n}         exactly n
x         {n,m}       at least n, no more than m, greedy
x         {n,m}+      at least n, no more than m, possessive
x         {n,m}?      at least n, no more than m, lazy
x         {n,}        n or more, greedy
x         {n,}+       n or more, possessive
x         {n,}?       n or more, lazy


ANCHORS AND SIMPLE ASSERTIONS

x         \b          word boundary (only ASCII letters recognized)
x         \B          not a word boundary
x         ^           start of subject
                      also after internal newline in multiline mode
x         \A          start of subject
x         $           end of subject
                      also before newline at end of subject
                      also before internal newline in multiline mode
x         \Z          end of subject
                      also before newline at end of subject
x         \z          end of subject
x         \G          first matching position in subject


MATCH POINT RESET

x         \K          reset start of match


ALTERNATION

x         expr|expr|expr...


CAPTURING

x         (...)           capturing group
x         (?<name>...)    named capturing group (Perl)
x         (?'name'...)    named capturing group (Perl)
x         (?P<name>...)   named capturing group (Python)
x         (?:...)         non-capturing group
x         (?|...)         non-capturing group; reset group numbers for
                          capturing groups in each alternative


ATOMIC GROUPS

x         (?>...)         atomic, non-capturing group


COMMENT

x         (?#....)        comment (not nestable)


OPTION SETTING

x         (?i)            caseless
x         (?J)            allow duplicate names
x         (?m)            multiline
x         (?s)            single line (dotall)
x         (?U)            default ungreedy (lazy)
x         (?x)            extended (ignore white space)
x         (?-...)         unset option(s)

       The following is recognized only at the start of a pattern or after one
       of the newline-setting options with similar syntax:

x         (*UTF8)         set UTF-8 mode


LOOKAHEAD AND LOOKBEHIND ASSERTIONS

x         (?=...)         positive look ahead
x         (?!...)         negative look ahead
x         (?<=...)        positive look behind
x         (?<!...)        negative look behind

       Each top-level branch of a look behind must be of a fixed length.


BACKREFERENCES

x         \n              reference by number (can be ambiguous)
x         \gn             reference by number
x         \g{n}           reference by number
x         \g{-n}          relative reference by number
x         \k<name>        reference by name (Perl)
x         \k'name'        reference by name (Perl)
x         \g{name}        reference by name (Perl)
x         \k{name}        reference by name (.NET)
x         (?P=name)       reference by name (Python)


SUBROUTINE REFERENCES (POSSIBLY RECURSIVE)

x         (?R)            recurse whole pattern
x         (?n)            call subpattern by absolute number
x         (?+n)           call subpattern by relative number
x         (?-n)           call subpattern by relative number
x         (?&name)        call subpattern by name (Perl)
x         (?P>name)       call subpattern by name (Python)
x         \g<name>        call subpattern by name (Oniguruma)
x         \g'name'        call subpattern by name (Oniguruma)
x         \g<n>           call subpattern by absolute number (Oniguruma)
x         \g'n'           call subpattern by absolute number (Oniguruma)
x         \g<+n>          call subpattern by relative number (PCRE extension)
x         \g'+n'          call subpattern by relative number (PCRE extension)
x         \g<-n>          call subpattern by relative number (PCRE extension)
x         \g'-n'          call subpattern by relative number (PCRE extension)


CONDITIONAL PATTERNS

         (?(condition)yes-pattern)
         (?(condition)yes-pattern|no-pattern)

         (?(n)...        absolute reference condition
         (?(+n)...       relative reference condition
         (?(-n)...       relative reference condition
         (?(<name>)...   named reference condition (Perl)
         (?('name')...   named reference condition (Perl)
         (?(name)...     named reference condition (PCRE)
         (?(R)...        overall recursion condition
         (?(Rn)...       specific group recursion condition
         (?(R&name)...   specific recursion condition
         (?(DEFINE)...   define subpattern for reference
         (?(assert)...   assertion condition


BACKTRACKING CONTROL

       The following act immediately they are reached:

         (*ACCEPT)       force successful match
         (*FAIL)         force backtrack; synonym (*F)

       The  following  act only when a subsequent match failure causes a back-
       track to reach them. They all force a match failure, but they differ in
       what happens afterwards. Those that advance the start-of-match point do
       so only if the pattern is not anchored.

         (*COMMIT)       overall failure, no advance of starting point
         (*PRUNE)        advance to next starting character
         (*SKIP)         advance start to current matching position
         (*THEN)         local failure, backtrack to next alternation


NEWLINE CONVENTIONS

       These are recognized only at the very start of the pattern or  after  a
       (*BSR_...) or (*UTF8) option.

x         (*CR)           carriage return only
x         (*LF)           linefeed only
x         (*CRLF)         carriage return followed by linefeed
x         (*ANYCRLF)      all three of the above
x         (*ANY)          any Unicode newline sequence


WHAT \R MATCHES

       These  are  recognized only at the very start of the pattern or after a
       (*...) option that sets the newline convention or UTF-8 mode.

         (*BSR_ANYCRLF)  CR, LF, or CRLF
         (*BSR_UNICODE)  any Unicode newline sequence


CALLOUTS

         (?C)      callout
         (?Cn)     callout with data n


SEE ALSO

       pcrepattern(3), pcreapi(3), pcrecallout(3), pcrematching(3), pcre(3).


AUTHOR

       Philip Hazel
       University Computing Service
       Cambridge CB2 3QH, England.


REVISION

       Last updated: 11 April 2009
       Copyright (c) 1997-2009 University of Cambridge.
------------------------------------------------------------------------------
